import Instruction.Instruction;
import InstructionParser.InstructionParser;
import InstructionMemory.InstructionMemory;
import RegisterFile.RegisterFile;
import ReservationStations.ReservationStationManager;
import DataCache.Cache;
import DataMemory.Memory;
import java.util.Queue;
import java.util.LinkedList;
import java.util.Scanner;


public class TomasuloSimulator {

    private Queue<Instruction> instructionQueue;
    private InstructionMemory instructionMemory;
    private RegisterFile registerFile;
    private ReservationStationManager reservationStations;
    private Cache dataCache;
    private Memory dataMemory;
    private int PC; // Program Counter
    private int clockCycle = 0;
    private int addLatency;
    private int subLatency;
    private int mulLatency;
    private int divLatency;
    private int cacheMissLatency;
    private int loadLatency;
    private int storeLatency;
    private InstructionParser parser;
    
    // Default sets memory to 1024 bytes & cache size to 1024 bytes. 
    public TomasuloSimulator(int numIntegerRegisters, int numFloatingPointRegisters, int blockSize, int addSubtractSize, int multiplyDivideSize, int addLatency, int subLatency, int mulLatency, int divLatency, int cacheMissLatency, int loadLatency, int storeLatency) {
        this.parser = new InstructionParser("src/instructions.txt");
    	this.instructionQueue = parser.getInstructionQueue();
        this.instructionMemory = parser.getInstructionMemory();
        
        this.registerFile = new RegisterFile(numIntegerRegisters, numFloatingPointRegisters, 0, 0.0f); 
        this.reservationStations = new ReservationStationManager(addSubtractSize, multiplyDivideSize);
        this.dataMemory = new Memory(1024); 
        this.dataCache = new Cache(1024, blockSize, dataMemory);

        this.PC = instructionMemory.getSize() - 1; // Set PC to the last instruction's index (adjust as needed)

    }


    public void runSimulation() {
       
    }
    
    
    private void printComponentStates() {
    	System.out.println("Register File:");
        registerFile.displayRegisterFile();
        System.out.println("\nReservation Stations:");
       // Display reservation station states here
        System.out.println("\nData Cache:");
        dataCache.displayCache();
    }


    private boolean isAllReservationStationsEmpty() {
     
    }

    private void issueInstructions() {

    }
    private void executeInstructions() {
        // Implement instruction execution logic here.
        // Check for ready instructions in reservation stations and execute them.
    }

    private void writeBackResults() {
        // Implement writeback logic here.
        // Write results from reservation stations back to the register file.
    }


    public static void main(String[] args) throws Exception {

    	
   
    }
}