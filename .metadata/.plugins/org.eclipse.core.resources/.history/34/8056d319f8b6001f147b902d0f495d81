package DataMemory;

public class Memory {
	  private final byte[] memory;

	    public Memory(int size) {
	        memory = new byte[size];
	    }

	    public void writeWord(int address, int value) {
	        for (int i = 0; i < 4; i++) {
	            memory[address + i] = (byte) ((value >> (i * 8)) & 0xFF);
	        }
	    }

	    public int readByte(int address) {
	        int value = 0;
	        for (int i = 0; i < 4; i++) {
	            value |= (memory[address + i] & 0xFF) << (i * 8);
	        }
	        return value;
	    }

	 // Write a 64-bit integer (8 bytes) to memory
	    public void writeDouble(int address, long value) {
	        for (int i = 0; i < 8; i++) {
	            memory[address + i] = (byte) ((value >> (i * 8)) & 0xFF);
	        }
	    }

	    public double readDouble(int address) {
	        long bits = 0;
	        for (int i = 0; i < 8; i++) {
	            bits |= (long) (memory[address + i] & 0xFF) << (i * 8);
	        }
	        return Double.longBitsToDouble(bits);
	    }
	    
	    // Write a 32-bit floating point number (single precision) into memory
	    public void writeFloat(int address, float value) {
	        int bits = Float.floatToIntBits(value);
	        for (int i = 0; i < 4; i++) {
	            memory[address + i] = (byte) ((bits >> (i * 8)) & 0xFF);
	        }
	    }

	    // Write a 64-bit floating point number (double precision) to memory
	    public void writeDoubleFloat(int address, double value) {
	        long bits = Double.doubleToLongBits(value);
	        for (int i = 0; i < 8; i++) {
	            memory[address + i] = (byte) ((bits >> (i * 8)) & 0xFF);
	        }
	    }
}
