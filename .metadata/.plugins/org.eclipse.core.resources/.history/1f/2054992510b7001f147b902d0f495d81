package Buffer;

import Instruction.Instruction;

public class LoadBuffer {
    private LoadBufferEntry[] buffer;
    private int currentTag;

    public LoadBuffer(int size) {
        buffer = new LoadBufferEntry[size];
        currentTag = 0;
        for (int i = 0; i < size; i++) {
            buffer[i] = new LoadBufferEntry(generateTag(), "");
        }
    }

    // Generate a new unique tag for the instruction
    private String generateTag() {
        return "L" + currentTag++;
    }

    // Dispatch load instruction to the load buffer
    public String dispatchInstruction(Instruction instruction) {
        for (LoadBufferEntry entry : buffer) {
            if (!entry.isBusy()) {
                entry.setBusy(true);
                return entry.getTag();
            }
        }
        return null; // No available load buffer entry
    }

    // Method to check for ready load instructions and execute them
    public void checkExecution() {
        for (LoadBufferEntry entry : buffer) {
            if (entry.isBusy()) {
                // Simulate the load operation
                System.out.println("Executing load at address: " + entry.getAddress());
                entry.clear(); // Instruction execution is complete
            }
        }
    }

    // Get the load buffer entries
    public LoadBufferEntry[] getBuffer() {
        return buffer;
    }
    
    public boolean hasAvailableSlot(){
        for(LoadBufferEntry entry : buffer){
            if(!entry.isBusy()) return true;
        }
        return false;
    }
    
}
