package TomasuloSimulator;

public class Main {
    public static void main(String[] args) {
        // Initialize the TomasuloSimulator with example parameters
        TomasuloSimulator simulator = new TomasuloSimulator(
            16, // Number of integer registers
            16, // Number of floating-point registers
            4,  // Cache block size
            3,  // Add/Subtract reservation station size
            2,  // Multiply/Divide reservation station size
            2,  // Add latency
            2,  // Subtract latency
            10, // Multiply latency
            20, // Divide latency
            5,  // Cache miss latency
            2,  // Load latency
            2,  // Store latency
            3,  // Load buffer size
            3   // Store buffer size
        );

        System.out.println("Tomasulo Simulator Initialized");

        // Print initial state
        System.out.println("\nInitial State:");
        printState(simulator);

        // Run one instruction issue cycle
        System.out.println("\nIssuing Instruction...");
        boolean issued = simulator.issueInstructions();

        // Print results
        if (issued) {
            System.out.println("\nInstruction Issued:");
        } else {
            System.out.println("\nNo instruction issued (queue might be empty or no available slots).");
        }

        // Print the state after issuing
        printState(simulator);
    }

    private static void printState(TomasuloSimulator simulator) {
        // Print Reservation Stations
        System.out.println("Reservation Stations:");
        System.out.println(simulator.getInstructionMemory()); // Customize based on available methods to print memory

        // Print Buffers
        System.out.println("Load Buffers:");
        simulator.getBuffers().getLoadBuffer().forEach(System.out::println);

        System.out.println("Store Buffers:");
        simulator.getBuffers().getStoreBuffer().forEach(System.out::println);

        // Print Registers
        System.out.println("Register File:");
        simulator.getRegisterFile().print(); // Assuming `print()` method exists
    }
}

