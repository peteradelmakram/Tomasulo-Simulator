package TomasuloSimulator;

import Instruction.Instruction;
import InstructionParser.InstructionParser;
import InstructionMemory.InstructionMemory;
import RegisterFile.RegisterFile;
import ReservationStations.ReservationStationManager;
import DataCache.Cache;
import DataMemory.Memory;
import java.util.Queue;
import java.io.IOException;
import java.util.LinkedList;
import java.util.Scanner;


public class TomasuloSimulator {
    private Queue<Instruction> instructionQueue;
    private InstructionMemory instructionMemory;
    private RegisterFile registerFile;
    private ReservationStationManager reservationStations;
    private Cache dataCache;
    private Memory dataMemory;
    private int PC; // Program Counter
    private int clockCycle = 0;
    private int addLatency;
    private int subLatency;
    private int mulLatency;
    private int divLatency;
    private int cacheMissLatency;
    private int loadLatency;
    private int storeLatency;
    private InstructionParser parser;

    // Constructor to initialize all components of the simulator
    public TomasuloSimulator(int numIntegerRegisters, int numFloatingPointRegisters, int blockSize, 
                              int addSubtractSize, int multiplyDivideSize, int addLatency, 
                              int subLatency, int mulLatency, int divLatency, 
                              int cacheMissLatency, int loadLatency, int storeLatency) {
        
        try {
			this.parser = new InstructionParser("src/instructions.txt");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
  

        // Initialize the instruction queue and memory from the parser
        this.instructionQueue = parser.getInstructionQueue();
        this.instructionMemory = parser.getInstructionMemory();

        // Initialize the RegisterFile, ReservationStations, Memory, and Cache
        this.registerFile = new RegisterFile(numIntegerRegisters, numFloatingPointRegisters, 0, 0.0f);
        this.reservationStations = new ReservationStationManager(addSubtractSize, multiplyDivideSize);
        this.dataMemory = new Memory(1024); // Initialize memory with 1024 bytes
        this.dataCache = new Cache(1024, blockSize, dataMemory); // Initialize cache with 1024 bytes and block size

        // Set Program Counter (PC) to 0 initially (first instruction)
        this.PC = this.instructionMemory.getSize() - 1;

        // Set latencies for various operations
        this.addLatency = addLatency;
        this.subLatency = subLatency;
        this.mulLatency = mulLatency;
        this.divLatency = divLatency;
        this.cacheMissLatency = cacheMissLatency;
        this.loadLatency = loadLatency;
        this.storeLatency = storeLatency;
    }

    // Getter for instruction queue
    public Queue<Instruction> getInstructionQueue() {
        return instructionQueue;
    }

    // Getter for instruction memory
    public InstructionMemory getInstructionMemory() {
        return instructionMemory;
    }

    // Simulate Tomasulo's algorithm execution
    public void runSimulator() {
        while (true) {
            clockCycle++;
            // Execute instructions, issue them to the appropriate reservation stations
            issueInstructions();
            // Execute instructions in reservation stations
            executeInstructions();
            // Write-back if execution is done
            writeBackInstructions();
            // Handle memory operations (e.g., load/store)
            handleMemoryOperations();

            // Break if all instructions are completed
            if (allInstructionsCompleted()) {
                break;
            }
        }
    }

    // Method to issue instructions from the instruction queue
    private void issueInstructions() {
        // Process instructions in the queue, issue them to reservation stations
        // This is where we will check for available slots in the reservation stations
    }

    // Method to execute instructions in the reservation stations
    private void executeInstructions() {
        // Simulate execution of instructions in reservation stations
    }

    // Method to write back completed instructions
    private void writeBackInstructions() {
        // Simulate writing back results from reservation stations to the register file
    }

    // Method to handle memory operations (load/store)
    private void handleMemoryOperations() {
        // Handle load/store instructions, manage data cache and memory
    }

    // Method to check if all instructions have completed execution
    private boolean allInstructionsCompleted() {
        // Check if all instructions have been executed, written back, and completed
        return false; // Placeholder for real logic
    }
}

