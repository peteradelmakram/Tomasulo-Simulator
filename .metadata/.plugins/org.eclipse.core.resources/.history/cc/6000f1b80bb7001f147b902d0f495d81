package ReservationStations;
import Instruction.Instruction;

public class AdditionReservationStation {
	private ReservationStationEntry[] stations;
    private int currentTag;

    public AdditionReservationStation(int size) {
        stations = new ReservationStationEntry[size];
        currentTag = 0;
        for (int i = 0; i < size; i++) {
            stations[i] = new ReservationStationEntry(generateTag(), "");
        }
    }

    // Generate a new unique tag for the instruction
    private String generateTag() {
        return "T" + currentTag++;
    }

    // Dispatch instruction to the reservation station
    public String dispatchInstruction(Instruction instruction) {
        for (ReservationStationEntry entry : stations) {
            if (!entry.isBusy()) {
            	entry.setInstruction(instruction);
            	return entry.getTag();
            }
        }
        return "";
    }

    // Method to check if any instruction in the reservation station is ready to execute
    public void checkExecution() {
        for (ReservationStationEntry entry : stations) {
            if (entry.isBusy() && entry.getVj() != null && entry.getVk() != null) {
                // The instruction can now execute, simulate the operation
                System.out.println("Executing " + entry.getOp() + " with operands " + entry.getVj() + " and " + entry.getVk());
                entry.clear(); // Instruction execution is complete
            }
        }
    }
    
    public boolean hasAvailableSlot() {
        for (ReservationStationEntry entry : stations) {
            if (!entry.isBusy()) {
                return true; // Found an empty slot
            }
        }
        return false; // No available slot
    }

    // Get the reservation stations
    public ReservationStationEntry[] getStations() {
        return stations;
    }
}
