package InstructionParser;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.LinkedList;
import java.util.Queue;
import Instruction.Instruction;

public class InstructionParser {
    private Queue<Instruction> instructionQueue = new LinkedList<>();

    // Method to parse a file and load instructions into the queue
    public void parseInstructions(String filePath) throws IOException {
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                parseLine(line.trim());
            }
        }
    }

    // Method to parse a line and create the corresponding Instruction
    private void parseLine(String line) {
        if (line.isEmpty() || line.startsWith("#")) {
            // Skip empty lines or comments
            return;
        }

        String[] parts = line.split("\\s+"); // Split by any whitespace
        String operation = parts[0];

        if (operation.equals("L.D") || operation.equals("S.D") || operation.equals("L.S") || operation.equals("S.S")) {
            // Load/Store instructions (destination, source)
            String destination = parts[1];
            String source = parts.length > 2 ? parts[2] : null; // For operations like L.D  F1, 0(R2)
            Instruction instruction = new Instruction(operation, destination, source);
            instructionQueue.offer(instruction);
        } else if (operation.equals("ADD.D") || operation.equals("SUB.D") || operation.equals("MUL.D") || operation.equals("DIV.D") ||
                   operation.equals("ADD.S") || operation.equals("SUB.S") || operation.equals("MUL.S") || operation.equals("DIV.S")) {
            // Arithmetic instructions (destination, source1, source2)
            String destination = parts[1];
            String source1 = parts[2];
            String source2 = parts[3];
            Instruction instruction = new Instruction(operation, destination, source1, source2);
            instructionQueue.offer(instruction);
        } else if (operation.equals("DADDI") || operation.equals("DSUBI")) {
            // DADDI/DSUBI (destination, source1, immediate)
            String destination = parts[1];
            String source1 = parts[2];
            String source2 = parts[3]; // immediate value
            Instruction instruction = new Instruction(operation, destination, source1, source2);
            instructionQueue.offer(instruction);
        } else if (operation.equals("BNE") || operation.equals("BEQ")) {
            // Branch instructions (source1, source2, label)
            String source1 = parts[1];
            String source2 = parts[2];
            String label = parts[3];
            Instruction instruction = new Instruction(operation, source1, source2, label);
            instructionQueue.offer(instruction);
        } else if (operation.equals("LW") || operation.equals("LD") || operation.equals("SW") || operation.equals("SD")) {
            // Load/Store instructions (destination, source)
            String destination = parts[1];
            String source = parts.length > 2 ? parts[2] : null;
            Instruction instruction = new Instruction(operation, destination, source);
            instructionQueue.offer(instruction);
        } else {
            // Handle any unknown operations or throw an error
            System.out.println("Unknown instruction: " + line);
        }
    }

    // Getter for the instruction queue
    public Queue<Instruction> getInstructionQueue() {
        return instructionQueue;
    }

    // Main method for testing
    public static void main(String[] args) {
        InstructionParser parser = new InstructionParser();
        try {
            parser.parseInstructions("src/instructions.txt");  // Path to the instruction file
            for (Instruction instruction : parser.getInstructionQueue()) {
                System.out.println(instruction);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
